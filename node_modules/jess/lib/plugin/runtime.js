"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const render_1 = require("../render");
const render_module_1 = require("../render-module");
/**
 * Rollup plugin to create CSS / runtime
 */
function default_1(options = {}) {
    const jessFiles = new Set();
    return {
        name: 'jess',
        transform(code, id) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!(/\.jess$/.test(id))) {
                    return null;
                }
                jessFiles.add(id);
                const result = yield render_module_1.renderModule(code, id, options);
                return { code: result.$js_runtime };
            });
        },
        buildEnd() {
            return __awaiter(this, void 0, void 0, function* () {
                const emitCss = (id) => __awaiter(this, void 0, void 0, function* () {
                    /**
                     * @todo - even though the file is already read, I couldn't figure
                     * out a way yet to pass that as a string to the internal Jess Rollup
                     * process in the `render` function. So, technically, this file
                     * will be read from the filesystem twice.
                     */
                    const result = yield render_1.render(id, options);
                    this.emitFile({
                        type: 'asset',
                        name: path.basename(id.replace(/\.jess/, '.css')),
                        source: result.$toCSS()
                    });
                });
                /**
                 * If Jess is the entry file for this Rollup process,
                 * or is imported by a non-Jess file, then generate a
                 * CSS asset.
                 */
                const entries = jessFiles.values();
                for (const file of entries) {
                    const info = this.getModuleInfo(file);
                    /** If it's the entry file, we can stop */
                    if (info.isEntry) {
                        yield emitCss(file);
                        break;
                    }
                    const nonJessImporters = info.importers.filter(id => !/\.jess$/.test(id));
                    if (nonJessImporters.length !== 0) {
                        yield emitCss(file);
                    }
                }
            });
        }
    };
}
exports.default = default_1;
