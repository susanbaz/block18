"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
const rollup = __importStar(require("rollup"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const compile_1 = __importDefault(require("./plugin/compile"));
const config_1 = __importDefault(require("./config"));
const merge_1 = __importDefault(require("lodash/merge"));
/**
 * Render CSS and (optionally) a runtime module
 */
const render = (filePath, config = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const opts = merge_1.default({}, config_1.default, config);
    const bundle = yield rollup.rollup({
        input: filePath,
        plugins: [
            // nodeResolve({
            //   extensions: ['.js', '.ts']
            // }),
            // commonJs(),
            compile_1.default(opts.options)
            // sucrase({
            //   exclude: ['node_modules/**'],
            //   transforms: ['typescript']
            // })
        ],
        external: [
            /node_modules/,
            'jess'
        ]
    });
    let compilerFile = filePath.replace(/\.jess$/, '__.js');
    const { output } = yield bundle.generate({
        format: 'cjs',
        file: compilerFile,
        exports: 'named'
    });
    compilerFile = path.resolve(process.cwd(), compilerFile);
    const compiler = output[0].code;
    fs.writeFileSync(compilerFile, compiler);
    let css;
    try {
        css = require(compilerFile).default(opts.vars);
        fs.unlinkSync(compilerFile);
    }
    catch (e) {
        fs.unlinkSync(compilerFile);
        throw e;
    }
    return Object.assign(Object.assign({}, css), { $js: output[1] && output[1].source });
});
exports.render = render;
