"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxy = exports.get = exports.merge = void 0;
const isPlainObject_1 = __importDefault(require("lodash/isPlainObject"));
const merge_1 = __importDefault(require("lodash/merge"));
const get_1 = __importDefault(require("lodash/get"));
const micro_memoize_1 = __importDefault(require("micro-memoize"));
/**
 * Use lodash merge for objects, return plain value otherwise
 */
const merge = (value, incomingValue) => {
    if (incomingValue === undefined) {
        return value;
    }
    if (isPlainObject_1.default(value)) {
        if (isPlainObject_1.default(incomingValue)) {
            return merge_1.default({}, value, incomingValue);
        }
        return value;
    }
    return incomingValue;
};
exports.merge = merge;
exports.get = get_1.default;
/**
 * Creates a proxy for the default function exports in transpiled stylesheets
 *
 * This is so we can get hashed classes on the export
 */
const proxy = (func, context) => {
    const memo = micro_memoize_1.default(func.bind(context));
    return new Proxy(memo, {
        get(target, p) {
            let prop = p.toString();
            if (prop === '$IS_PROXY') {
                return true;
            }
            if (prop.startsWith('__')) {
                prop = prop.slice(2);
                if (prop in target) {
                    return target[prop];
                }
            }
            return context.hashClass(prop.toString());
        }
    });
};
exports.proxy = proxy;
