"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const parser_1 = require("@jesscss/parser");
const cst_visitor_1 = require("./cst-visitor");
const cstParser = new parser_1.Parser();
/**
 * This is an abstraction between the Jess CST parser
 * and the Jess AST. Essentially, this forwards parsing to
 * the @jesscss/parser package, and, if successful, builds an
 * AST out of the returned CST.
 */
const parse = (input, fileInfo = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const { cst, lexerResult, parser } = cstParser.parse(input);
    if (lexerResult.errors.length > 0) {
        throw Object.assign(Object.assign({}, lexerResult.errors[0]), { fileInfo, errors: lexerResult.errors });
    }
    if (parser.errors.length > 0) {
        throw Object.assign(Object.assign({}, parser.errors[0]), { fileInfo, errors: parser.errors });
    }
    try {
        const node = new cst_visitor_1.CstVisitor(parser).visit(cst);
        return node;
    }
    catch (e) {
        throw {
            message: e.message,
            stack: e.stack,
            fileInfo,
            errors: [e]
        };
    }
});
exports.parse = parse;
