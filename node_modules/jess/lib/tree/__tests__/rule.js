"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const __1 = require("..");
const context_1 = require("../../context");
const output_1 = require("../../output");
let context;
let out;
describe('Rule', () => {
    beforeEach(() => {
        context = new context_1.Context;
        out = new output_1.OutputCollector;
    });
    it('should serialize to CSS', () => {
        const node = __1.rule({
            sels: __1.list([__1.sel([__1.el('foo')])]),
            value: [
                __1.decl({ name: 'border', value: __1.spaced(['1px', 'solid', 'black']) }),
                __1.decl({ name: 'color', value: __1.anon('#eee') })
            ]
        });
        chai_1.expect(`${node}`).to.eq('foo {\n  border: 1px solid black;\n  color: #eee;\n}');
    });
    it('should serialize to a module', () => {
        const node = __1.rule({
            sels: __1.list([__1.sel([__1.el('foo')])]),
            value: [
                __1.set(__1.keyval({ name: 'brandColor', value: __1.js('area(5)') })),
                __1.decl({ name: 'color', value: __1.js('brandColor') })
            ]
        });
        node.toModule(context, out);
        chai_1.expect(out.toString()).to.eq('$J.rule({\n  sels: $J.list([\n    $J.sel([$J.el($J.anon("foo"))])\n  ]),\n  value: $J.ruleset(\n    (() => {\n      const $OUT = []\n      let brandColor = area(5)\n      $OUT.push($J.decl({\n        name: $J.anon("color"),\n        value: brandColor\n      }))\n      return $OUT\n    })()\n  )},[])');
    });
});
