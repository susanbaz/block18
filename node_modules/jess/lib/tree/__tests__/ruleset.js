"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const __1 = require("..");
const context_1 = require("../../context");
const output_1 = require("../../output");
let context;
let out;
describe('Ruleset', () => {
    beforeEach(() => {
        context = new context_1.Context;
        context.id = 'testing';
        out = new output_1.OutputCollector;
    });
    it('should merge rulesets into rules', () => {
        /** We need a root node to bubble rules */
        let node = __1.root([
            __1.rule({
                sels: __1.list([__1.sel([__1.el('.collapse')])]),
                value: __1.ruleset([
                    __1.decl({ name: 'chungus', value: __1.spaced(['foo', 'bar']) }),
                    __1.ruleset([
                        __1.decl({ name: 'bird', value: __1.spaced(['in', 'hand']) })
                    ])
                ])
            })
        ]);
        node = node.eval(context);
        chai_1.expect(`${node}`).to.eq('.collapse {\n  chungus: foo bar;\n  bird: in hand;\n}\n');
    });
    it('should output var() values', () => {
        context.opts.dynamic = true;
        let node = __1.ruleset([
            __1.decl({ name: 'a', value: __1.spaced([__1.js('obj.value'), __1.call({ name: 'func', value: __1.js('foo.bar') })]) })
        ]);
        node.toModule(context, out);
        chai_1.expect(out.toString()).to.eq('$J.ruleset(\n  (() => {\n    const $OUT = []\n    $OUT.push($J.decl({\n      name: $J.anon("a"),\n      value: $J.spaced([$J.call({\n        name: "var",\n        value: $J.list([\n          "--vtesting-0",\n          obj.value\n        ]),\n      }), $J.call({\n        name: "var",\n        value: $J.list([\n          "--vtesting-1",\n          $J.call({\n            name: "func",\n            value: foo.bar,\n            ref: () => func,\n          })\n        ]),\n      })])\n    }))\n    return $OUT\n  })()\n)');
    });
    it('should output --var declarations', () => {
        context.opts.dynamic = true;
        let node = __1.ruleset([
            __1.decl({ name: 'a', value: __1.spaced([__1.js('obj.value'), __1.call({ name: 'func', value: __1.js('foo.bar') })]) })
        ]);
        context.isRuntime = true;
        node.toModule(context, out);
        chai_1.expect(out.toString()).to.eq('$J.ruleset(\n  (() => {\n    const $OUT = []\n    $OUT.push($J.decl({\n      name: $J.anon("--vtesting-0"),\n      value: obj.value\n    }))\n$OUT.push($J.decl({\n      name: $J.anon("--vtesting-1"),\n      value: $J.call({\n        name: "func",\n        value: foo.bar,\n        ref: () => func,\n      })\n    }))\n    return $OUT\n  })()\n)');
    });
});
