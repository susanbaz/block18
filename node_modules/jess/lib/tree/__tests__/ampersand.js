"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const __1 = require("..");
const context_1 = require("../../context");
const output_1 = require("../../output");
let context;
let out;
describe('Ampersand', () => {
    beforeEach(() => {
        context = new context_1.Context;
        out = new output_1.OutputCollector;
    });
    it('should inherit selectors', () => {
        /** We need a root node to bubble rules */
        let node = __1.root([
            __1.rule({
                sels: __1.list([__1.sel([__1.el('.one'), __1.el('.two')])]),
                value: __1.ruleset([
                    __1.decl({ name: 'chungus', value: __1.expr(['foo', ' ', 'bar']) }),
                    __1.rule({ sels: __1.expr([__1.amp()]), value: __1.ruleset([
                            __1.decl({ name: 'chungus', value: __1.expr(['bar', ' ', 'foo']) })
                        ])
                    })
                ])
            })
        ]);
        node = node.eval(context);
        chai_1.expect(`${node}`).to.eq('.one.two {\n  chungus: foo bar;\n}\n.one.two {\n  chungus: bar foo;\n}\n');
    });
    it('should serialize to a module', () => {
        const node = __1.expr([__1.amp()]);
        node.toModule(context, out);
        chai_1.expect(out.toString()).to.eq('$J.expr([$J.amp()])');
    });
});
