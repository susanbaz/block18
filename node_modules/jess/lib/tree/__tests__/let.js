"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const __1 = require("..");
const context_1 = require("../../context");
const output_1 = require("../../output");
let context;
let out;
describe('Let', () => {
    beforeEach(() => {
        context = new context_1.Context;
        context.depth = 1;
        out = new output_1.OutputCollector;
    });
    it('should serialize a @let', () => {
        context.depth = 2;
        let rule = __1.set(__1.keyval({
            name: 'brandColor',
            value: __1.expr([__1.anon('#eee')])
        }));
        chai_1.expect(`${rule}`).to.eq('@let brandColor: #eee;');
        rule.toModule(context, out);
        chai_1.expect(out.toString()).to.eq('let brandColor = $J.expr([$J.anon("#eee")])');
    });
    it('should serialize a @let collection', () => {
        let rule = __1.set(__1.keyval({
            name: 'brand',
            value: __1.coll([
                __1.keyval({
                    name: 'global',
                    value: __1.coll([
                        __1.keyval({
                            name: 'dark',
                            value: __1.anon('#000')
                        })
                    ])
                }),
                __1.keyval({
                    name: 'dark',
                    value: __1.anon('#222')
                }),
                __1.keyval({
                    name: 'light',
                    value: __1.anon('#eee')
                })
            ])
        }));
        chai_1.expect(`${rule}`).to.eq('@let brand {\n  global {\n    dark: #000;\n  }\n  dark: #222;\n  light: #eee;\n}');
        rule.toModule(context, out);
        chai_1.expect(out.toString()).to.eq('brand = $J.merge({}, $J.get($VARS, \'brand\'))\nbrand.global = {}\nbrand.global.dark = $J.get($VARS, \'brand.global.dark\', $J.anon("#000"))\nbrand.dark = $J.get($VARS, \'brand.dark\', $J.anon("#222"))\nbrand.light = $J.get($VARS, \'brand.light\', $J.anon("#eee"))\n');
    });
});
