import { JsNode } from './js-node';
import { JsKeyValue } from './js-key-value';
import type { Context } from '../context';
import { OutputCollector } from '../output';
import { LocationInfo, Node, NodeMap } from './node';
/**
 * @let
 *
 * @note
 * The lower-case API variant for this is `set()`,
 * see the note below.
 *
 * @todo
 * Check that we're not redefining vars? To do that, we'd have to
 * address the todo in js-import to get a true list of scoped vars.
 * For now, JS will simply throw an eval error.
 */
export declare class Let extends JsNode {
    value: JsKeyValue;
    toCSS(context: Context, out: OutputCollector): void;
    recurseValue(value: Node, keys: string[], context: Context, out: OutputCollector): void;
    toModule(context: Context, out: OutputCollector): void;
}
/**
 * `let` is a reserved word, so we'll use `set`
 * for lower-case API
 */
export declare const set: (value: JsKeyValue | NodeMap, location?: LocationInfo) => Let;
