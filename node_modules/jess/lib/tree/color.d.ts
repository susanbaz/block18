import type { Context } from '../context';
import type { OutputCollector } from '../output';
import { Node, LocationInfo } from './node';
declare type RGBA = [number, number, number, number] | number[];
export declare class Color extends Node {
    value: string;
    _rgba: RGBA;
    constructor(val?: string | {
        value: string;
        rgba?: RGBA;
    }, location?: LocationInfo);
    /** Create an rgba map only if we need it */
    get rgba(): RGBA;
    get rgb(): [number, number, number];
    get alpha(): number;
    toHex(): string;
    toHSL(): {
        h: number;
        s: number;
        l: number;
        a: number;
    };
    toString(): string;
    toCSS(context: Context, out: OutputCollector): void;
    toModule(context: Context, out: OutputCollector): void;
}
export declare const color: (value?: string | {
    value: string;
    rgba?: RGBA;
}, location?: LocationInfo) => Color;
export {};
