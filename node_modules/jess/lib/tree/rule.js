"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = exports.Rule = void 0;
const node_1 = require("./node");
const ruleset_1 = require("./ruleset");
const nil_1 = require("./nil");
/**
 * A qualified rule
 * @example
 * .box {
 *   color: black;
 * }
 */
class Rule extends node_1.Node {
    constructor(value, location) {
        const val = value.value;
        if (Array.isArray(val)) {
            value.value = new ruleset_1.Ruleset(val);
        }
        super(value, location);
    }
    eval(context) {
        if (!this.evaluated) {
            const rule = this.clone();
            const sels = this.sels.eval(context);
            rule.sels = sels;
            context.frames.unshift(sels);
            rule.value = this.value.eval(context);
            context.frames.shift();
            rule.evaluated = true;
            /** Remove empty rules */
            if (rule.value.value.length === 0) {
                return new nil_1.Nil();
            }
            return rule;
        }
        return this;
    }
    toCSS(context, out) {
        const { sels, value } = this;
        context.inSelector = true;
        sels.toCSS(context, out);
        context.inSelector = false;
        out.add(' ');
        value.toCSS(context, out);
    }
    toModule(context, out) {
        out.add(`$J.rule({\n`, this.location);
        context.indent++;
        let pre = context.pre;
        out.add(`${pre}sels: `);
        this.sels.toModule(context, out);
        out.add(`,\n${pre}value: `);
        this.value.toModule(context, out);
        context.indent--;
        out.add(`},${JSON.stringify(this.location)})`);
    }
}
exports.Rule = Rule;
Rule.prototype.allowRoot = true;
Rule.prototype.type = 'Rule';
const rule = (value, location) => new Rule(value, location);
exports.rule = rule;
