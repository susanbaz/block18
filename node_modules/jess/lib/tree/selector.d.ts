import { Expression } from './expression';
import type { Node, NodeMap, LocationInfo } from './node';
import type { Context } from '../context';
import { OutputCollector } from '../output';
/**
 * @example
 * #id > .class.class
 *
 * Stored as:
 * [Element, Combinator, Element, Element]
 *
 * @todo
 * Push an ampersand at the beginning of selector expressions
 * if there isn't one
 */
export declare class Selector extends Expression {
    constructor(value: (string | Node)[] | NodeMap, location?: LocationInfo);
    eval(context: Context): any;
    toCSS(context: Context, out: OutputCollector): void;
    toModule(context: Context, out: OutputCollector): void;
}
export declare const sel: (value: (string | Node)[] | NodeMap, location?: LocationInfo) => Selector;
