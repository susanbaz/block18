"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.atrule = exports.AtRule = void 0;
const node_1 = require("./node");
const list_1 = require("./list");
const ampersand_1 = require("./ampersand");
const rule_1 = require("./rule");
/**
 * A rule like @charset or @media
 */
class AtRule extends node_1.Node {
    eval(context) {
        const node = super.eval(context);
        /** Don't let rooted rules bubble past an at-rule */
        if (node.rules) {
            let rules = node.rules.value;
            /** Wrap sub-rules of a media query like Less */
            if (context.frames.length !== 0) {
                const rule = new rule_1.Rule({ sels: new list_1.List([new ampersand_1.Ampersand()]), value: rules })
                    .inherit(this)
                    .eval(context);
                rules = [rule];
                node.rules.value = rules;
            }
            const rootRules = this.collectRoots();
            rootRules.forEach(rule => rules.push(rule));
        }
        return node;
    }
    toCSS(context, out) {
        out.add(`${this.name}`, this.location);
        /** Prelude expression includes white space */
        const value = this.value;
        if (value) {
            value.toCSS(context, out);
        }
        if (this.rules) {
            this.rules.toCSS(context, out);
        }
        else {
            out.add(';');
        }
    }
    toModule(context, out) {
        out.add(`$J.atrule({\n`, this.location);
        let pre = context.pre;
        context.indent++;
        out.add(`${pre}  name: ${JSON.stringify(this.name)}`);
        const value = this.value;
        if (value) {
            out.add(`,\n${pre}  value: `);
            value.toModule(context, out);
        }
        const rules = this.rules;
        if (rules) {
            out.add(`,\n${pre}  rules: `);
            rules.toModule(context, out);
        }
        context.indent--;
        out.add(`\n${pre}},${JSON.stringify(this.location)})`);
    }
}
exports.AtRule = AtRule;
AtRule.prototype.allowRoot = true;
AtRule.prototype.type = 'AtRule';
const atrule = (value, location) => new AtRule(value, location);
exports.atrule = atrule;
