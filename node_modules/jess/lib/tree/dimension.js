"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.num = exports.dimension = exports.Dimension = void 0;
const node_1 = require("./node");
/**
 * A number or dimension
 */
class Dimension extends node_1.Node {
    constructor(value, location) {
        if (node_1.isNodeMap(value)) {
            super(value, location);
            return;
        }
        else if (value.constructor === Number) {
            super({ value }, location);
            return;
        }
        const regex = /([-+]?[0-9]*(?:\.[0-9]+)?)(%|[a-z]*)/;
        const found = value.match(regex);
        if (!found) {
            throw { message: 'Not a valid dimension.' };
        }
        super({
            value: parseFloat(found[1]),
            unit: found[2]
        }, location);
    }
    toString() {
        const precision = 100000000;
        let { value, unit } = this;
        value = Math.round(value * precision) / precision;
        return `${value}${unit || ''}`;
    }
    toCSS(context, out) {
        out.add(this.toString(), this.location);
    }
    toModule(context, out) {
        var _a;
        const pre = context.pre;
        out.add(`$J.num({\n`
            + `  ${pre}value: ${this.value},\n`
            + `  ${pre}unit: "${(_a = this.unit) !== null && _a !== void 0 ? _a : ''}"\n`
            + `${pre}})`, this.location);
    }
}
exports.Dimension = Dimension;
Dimension.prototype.type = 'Dimension';
const dimension = (...args) => new Dimension(...args);
exports.dimension = dimension;
/** alias */
exports.num = exports.dimension;
