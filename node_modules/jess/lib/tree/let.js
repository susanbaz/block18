"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.set = exports.Let = void 0;
const js_node_1 = require("./js-node");
const js_collection_1 = require("./js-collection");
/**
 * @let
 *
 * @note
 * The lower-case API variant for this is `set()`,
 * see the note below.
 *
 * @todo
 * Check that we're not redefining vars? To do that, we'd have to
 * address the todo in js-import to get a true list of scoped vars.
 * For now, JS will simply throw an eval error.
 */
class Let extends js_node_1.JsNode {
    toCSS(context, out) {
        out.add('@let ', this.location);
        this.value.toCSS(context, out);
    }
    recurseValue(value, keys, context, out) {
        const pre = context.pre;
        if (value instanceof js_collection_1.JsCollection) {
            if (keys.length === 1) {
                out.add(`${keys[0]} = $J.merge({}, $J.get($VARS, '${keys[0]}'))\n${pre}`);
            }
            else {
                out.add(`${keys.join('.')} = {}\n${pre}`);
            }
            value.value.forEach(node => {
                this.recurseValue(node.value, [...keys, node.name.value], context, out);
            });
        }
        else {
            out.add(`${keys.join('.')} = $J.get($VARS, '${keys.join('.')}', `);
            value.toModule(context, out);
            out.add(`)\n${pre}`);
        }
    }
    toModule(context, out) {
        const name = this.value.name.value;
        if (context.depth === 0) {
            out.add(`export let ${name}`, this.location);
            context.exports.add(name);
        }
        else {
            if (context.depth !== 1) {
                out.add(`let ${name} = `);
                this.value.value.toModule(context, out);
                return;
            }
            this.recurseValue(this.value.value, [name], context, out);
        }
    }
}
exports.Let = Let;
Let.prototype.type = 'Let';
/**
 * `let` is a reserved word, so we'll use `set`
 * for lower-case API
 */
const set = (value, location) => new Let(value, location);
exports.set = set;
