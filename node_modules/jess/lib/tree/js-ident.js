"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ident = exports.JsIdent = exports.JsReservedWords = void 0;
const node_1 = require("./node");
const js_node_1 = require("./js-node");
exports.JsReservedWords = [
    'abstract', 'arguments',
    'await', 'boolean',
    'break', 'byte',
    'case', 'catch',
    'char', 'class',
    'const', 'continue',
    'debugger', 'default',
    'delete', 'do',
    'double', 'else',
    'enum', 'eval',
    'export', 'extends',
    'false', 'final',
    'finally', 'float',
    'for', 'function',
    'goto', 'if',
    'implements', 'import',
    'in', 'instanceof',
    'int', 'interface',
    'let', 'long',
    'native', 'new',
    'null', 'package',
    'private', 'protected',
    'public', 'return',
    'short', 'static',
    'super', 'switch',
    'synchronized', 'this',
    'throw', 'throws',
    'transient', 'true',
    'try', 'typeof',
    'undefined',
    'var', 'void',
    'volatile', 'while',
    'with', 'yield'
];
/**
 * A super-type for inheritance checks
 */
class JsIdent extends js_node_1.JsNode {
    constructor(value, location) {
        let name;
        if (node_1.isNodeMap(value)) {
            name = value.value;
        }
        else {
            name = value;
        }
        if (name.includes('-')) {
            throw {
                message: 'Dashes are not allowed in JS identifiers.'
            };
        }
        if (exports.JsReservedWords.includes(name)) {
            throw {
                message: `'${name}' is a reserved word.`
            };
        }
        super(name, location);
    }
    toModule(context, out) {
        out.add(this.value);
    }
}
exports.JsIdent = JsIdent;
JsIdent.prototype.type = 'JsIdent';
const ident = (value, location) => new JsIdent(value, location);
exports.ident = ident;
