"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.el = exports.Element = void 0;
const anonymous_1 = require("./anonymous");
const list_1 = require("./list");
const expression_1 = require("./expression");
const node_1 = require("./node");
class Element extends node_1.Node {
    constructor(value, location) {
        if (node_1.isNodeMap(value)) {
            super(value, location);
            return;
        }
        super({
            value: value.constructor === String ? new anonymous_1.Anonymous(value) : value
        });
    }
    /** Very simple string matching */
    get isAttr() {
        return /^\[/.test(this.value.value);
    }
    get isClass() {
        return /^\./.test(this.value.value);
    }
    get isId() {
        return /^#/.test(this.value.value);
    }
    get isPseudo() {
        return /^:/.test(this.value.value);
    }
    get isIdent() {
        return /^[a-z]/.test(this.value.value);
    }
    eval(context) {
        const node = this.clone();
        const value = context.cast(node.value).eval(context);
        node.value = value;
        // Bubble expressions and lists up to Selectors
        if (value instanceof expression_1.Expression || value instanceof list_1.List) {
            return value;
        }
        if (node.isClass) {
            context.hashClass(node.value.value);
        }
        return node;
    }
    toCSS(context, out) {
        if (this.isClass) {
            out.add(context.hashClass(this.value.value), this.location);
        }
        else {
            out.add(this.value.value, this.location);
        }
    }
    toModule(context, out) {
        const loc = this.location;
        out.add(`$J.el(`, loc);
        this.value.toModule(context, out);
        out.add(')');
    }
}
exports.Element = Element;
Element.prototype.type = 'Element';
const el = (...args) => new Element(...args);
exports.el = el;
