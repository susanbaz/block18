"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderModule = void 0;
const context_1 = require("./context");
const output_1 = require("./output");
const parser_1 = require("./parser");
const hashCode = (str) => {
    var hash = 0;
    for (let i = 0; i < str.length; i++) {
        let chr = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
};
/**
 * Used by the Rollup pre-processor
 *
 * @param contents - Full file contents
 * @param filePath - absolute path to file
 *
 * @todo - format errors a la eslint
 */
const renderModule = (contents, filePath, opts = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const contextOpts = /\.m(odule)?\.jess/.test(filePath)
        ? Object.assign({ module: true }, opts) : opts;
    const root = yield parser_1.parse(contents, {
        filename: filePath,
        rootpath: process.cwd()
    });
    /** Create compile-time module */
    let context = new context_1.Context(contextOpts);
    const contextId = hashCode(filePath).toString(16);
    context.id = contextId;
    let out = new output_1.OutputCollector;
    let $js;
    let $js_runtime;
    root.toModule(context, out);
    $js = out.toString();
    /** Create run-time module */
    out = new output_1.OutputCollector;
    context = new context_1.Context(contextOpts);
    context.id = contextId;
    context.isRuntime = true;
    root.toModule(context, out);
    $js_runtime = out.toString();
    /** @todo - sourcemaps for runtime */
    return {
        $js, $js_runtime
    };
});
exports.renderModule = renderModule;
