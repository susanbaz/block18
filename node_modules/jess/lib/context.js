"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = exports.generateId = void 0;
const node_1 = require("./tree/node");
const nil_1 = require("./tree/nil");
const list_1 = require("./tree/list");
const dimension_1 = require("./tree/dimension");
const anonymous_1 = require("./tree/anonymous");
const isPlainObject_1 = __importDefault(require("lodash/isPlainObject"));
const idChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
const generateId = (length = 8) => {
    let str = '';
    for (let i = 0; i < length; i++) {
        str += idChars[Math.floor(Math.random() * idChars.length)];
    }
    return str;
};
exports.generateId = generateId;
class Context {
    constructor(opts = {}) {
        this.varCounter = 0;
        this.originalOpts = opts;
        this.opts = opts;
        this.id = exports.generateId();
        this.frames = [];
        this.exports = new Set();
        this.indent = 0;
        this.depth = 0;
        this.classMap = Object.create(null);
        this.rootRules = [];
    }
    get pre() {
        return Array(this.indent + 1).join('  ');
    }
    /** Hash a CSS class name or not depending on the `module` setting */
    hashClass(name) {
        /** Remove dot for mapping */
        name = name.slice(1);
        const lookup = this.classMap[name];
        if (lookup) {
            return `.${lookup}`;
        }
        let mapVal;
        if (this.opts.module) {
            mapVal = `${name}_${this.id}`;
        }
        else {
            mapVal = name;
        }
        this.classMap[name] = mapVal;
        return `.${mapVal}`;
    }
    getVar() {
        return `--v${this.id}-${this.varCounter++}`;
    }
    /**
     * Casts a primitive value to a Jess node
     * (if not already). This is for CSS output.
     *
     * @example
     * cast(area(5))
     */
    cast(value) {
        if (value === undefined || value === null) {
            return new nil_1.Nil;
        }
        if (value instanceof node_1.Node) {
            return value;
        }
        if (isPlainObject_1.default(value)) {
            if (Object.prototype.hasOwnProperty.call(value, '$root')) {
                return value.$root;
            }
            return new anonymous_1.Anonymous('[object]');
        }
        if (Array.isArray(value)) {
            return new list_1.List(value);
        }
        if (value.constructor === Number) {
            return new dimension_1.Dimension(value);
        }
        return new anonymous_1.Anonymous(value.toString());
    }
}
exports.Context = Context;
