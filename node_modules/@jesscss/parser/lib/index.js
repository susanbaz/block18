"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const chevrotain_1 = require("chevrotain");
const jessTokens_1 = require("./jessTokens");
const css_parser_1 = require("@jesscss/css-parser");
const jessParser_1 = require("./jessParser");
__exportStar(require("./jessParser"), exports);
__exportStar(require("./jessTokens"), exports);
class Parser {
    constructor() {
        const { tokens, T } = css_parser_1.createTokens(jessTokens_1.Fragments, jessTokens_1.Tokens);
        /**
         * @todo
         * Make a multi-mode lexer for better JavaScript parsing?
         * At the least, we could do multi-mode to properly
         * process template strings ``
         */
        this.lexer = new chevrotain_1.Lexer(tokens, {
            ensureOptimizations: true,
            skipValidations: process.env['JESS_TESTING_MODE'] !== 'true'
        });
        this.parser = new jessParser_1.JessParser(tokens, T);
    }
    parse(text) {
        const parser = this.parser;
        const lexerResult = this.lexer.tokenize(text);
        const lexedTokens = lexerResult.tokens;
        parser.input = lexedTokens;
        const cst = parser.root();
        return { cst, lexerResult, parser };
    }
}
exports.Parser = Parser;
