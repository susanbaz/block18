"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const chevrotain_1 = require("chevrotain");
const cssTokens_1 = require("./cssTokens");
const cssParser_1 = require("./cssParser");
const util_1 = require("./util");
__exportStar(require("./cssTokens"), exports);
__exportStar(require("./util"), exports);
__exportStar(require("./cssParser"), exports);
class Parser {
    constructor() {
        const { tokens, T } = util_1.createTokens(cssTokens_1.Fragments, cssTokens_1.Tokens);
        this.lexer = new chevrotain_1.Lexer(tokens, {
            ensureOptimizations: true,
            // Always run the validations during testing (dev flows).
            // And avoid validation during productive flows to reduce the Lexer's startup time.
            skipValidations: process.env['JESS_TESTING_MODE'] !== 'true'
        });
        this.parser = new cssParser_1.CssParser(tokens, T);
    }
    parse(text) {
        const parser = this.parser;
        const lexerResult = this.lexer.tokenize(text);
        const lexedTokens = lexerResult.tokens;
        parser.input = lexedTokens;
        const cst = parser.root();
        return { cst, lexerResult, parser };
    }
}
exports.Parser = Parser;
