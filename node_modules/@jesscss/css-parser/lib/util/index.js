"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTokens = exports.LexerType = void 0;
const chevrotain_1 = require("chevrotain");
// TODO: get rid of xRegExp dep
const XRegExp = __importStar(require("xregexp"));
__exportStar(require("./cst"), exports);
var LexerType;
(function (LexerType) {
    LexerType[LexerType["NA"] = 0] = "NA";
    LexerType[LexerType["SKIPPED"] = 1] = "SKIPPED";
})(LexerType = exports.LexerType || (exports.LexerType = {}));
/**
 * Builds proper tokens from a raw token definition.
 * This allows us to extend / modify tokens before creating them
 */
const createTokens = (rawFragments, rawTokens) => {
    const fragments = {};
    const T = {};
    const tokens = [];
    /** Build fragment replacements */
    rawFragments.forEach(fragment => {
        fragments[fragment[0]] = XRegExp.build(fragment[1], fragments);
    });
    rawTokens.forEach((rawToken) => {
        let { name, pattern, longer_alt, categories, group } = rawToken, rest = __rest(rawToken, ["name", "pattern", "longer_alt", "categories", "group"]);
        let regExpPattern;
        if (pattern !== LexerType.NA) {
            const category = !categories || categories[0];
            if (!category || (group !== LexerType.SKIPPED && category !== 'BlockMarker')) {
                if (categories) {
                    categories.push('Value');
                }
                else {
                    categories = ['Value'];
                }
                if (category !== 'Ident') {
                    categories.push('NonIdent');
                }
            }
            if (pattern instanceof RegExp) {
                regExpPattern = pattern;
            }
            else if (Array.isArray(pattern)) {
                regExpPattern = pattern[1].bind(XRegExp.build(pattern[0], fragments, 'y'));
            }
            else {
                regExpPattern = XRegExp.build(pattern, fragments);
            }
        }
        else {
            regExpPattern = chevrotain_1.Lexer.NA;
        }
        const longerAlt = longer_alt ? { longer_alt: T[longer_alt] } : {};
        const groupValue = group === LexerType.SKIPPED
            ? { group: chevrotain_1.Lexer.SKIPPED }
            : group ? { group: group } : {};
        const tokenCategories = categories
            ? {
                categories: categories.map(category => {
                    return T[category];
                })
            }
            : {};
        const token = chevrotain_1.createToken(Object.assign(Object.assign(Object.assign(Object.assign({ name, pattern: regExpPattern }, longerAlt), groupValue), tokenCategories), rest));
        T[name] = token;
        /** Build tokens from bottom to top */
        tokens.unshift(token);
    });
    return {
        tokens,
        T
    };
};
exports.createTokens = createTokens;
