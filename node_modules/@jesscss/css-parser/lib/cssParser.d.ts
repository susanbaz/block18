import { TokenType, IParserConfig, BaseParser, IRuleConfig, IToken } from 'chevrotain';
import { EmbeddedActionsParser } from 'chevrotain';
import { TokenMap } from './util';
export type { IToken };
export declare type Rule<T extends any = any> = (idxInCallingRule?: number, ...args: any[]) => T;
/**
 * CST structure as follows
 *
 * @example
 * ```
 * {
 *   name: 'root'
 *   children: [
 *     {
 *       name: 'AtRule',
 *       children: [...]
 *       location: {...}
 *     },
 *     {
 *       name: 'WS',
 *       value: '\n',
 *       location: {...}
 *     }
 *   ]
 *   location: {...}
 * }
 * ```
 */
export declare type ILocationInfo = {
    startOffset: number;
    startLine: number;
    startColumn: number;
    endOffset: number;
    endLine: number;
    endColumn: number;
};
export declare type CstChild = CstNode | IToken;
export declare type CstNode = {
    name: string;
    children: CstChild[];
    location?: ILocationInfo;
};
export declare class CssParser extends EmbeddedActionsParser {
    T: TokenMap;
    _: Function;
    option: BaseParser['option'];
    consume: BaseParser['consume'];
    /** Productions */
    root: Rule<CstNode>;
    primary: Rule;
    rule: Rule;
    atRule: Rule;
    knownAtRule: Rule;
    unknownAtRule: Rule;
    atImport: Rule;
    atMedia: Rule;
    atSupports: Rule;
    atNested: Rule;
    atNonNested: Rule;
    /** @media */
    mediaQueryList: Rule;
    mediaQuery: Rule;
    mediaCondition: Rule;
    mediaFeature: Rule;
    mediaAnd: Rule;
    /** blocks */
    qualifiedRule: Rule;
    testQualifiedRule: Rule;
    testQualifiedRuleExpression: Rule;
    block: Rule;
    curlyBlock: Rule;
    customBlock: Rule;
    customPreludeBlock: Rule;
    /** Selector rules */
    selectorList: Rule;
    complexSelector: Rule;
    combinatorSelector: Rule;
    compoundSelector: Rule;
    simpleSelector: Rule;
    pseudoSelector: Rule;
    attrSelector: Rule;
    attrIdent: Rule;
    nameSelector: Rule;
    /** declarations */
    declaration: Rule;
    customDeclaration: Rule;
    property: Rule;
    customProperty: Rule;
    /** expressions */
    expressionList: Rule;
    expression: Rule;
    /** values */
    value: Rule;
    atomicValue: Rule;
    customValue: Rule;
    customPrelude: Rule;
    customValueOrSemi: Rule;
    anyToken: Rule;
    extraTokens: Rule;
    protected currIdx: number;
    constructor(tokens: TokenType[], T: TokenMap, config?: IParserConfig);
    /** Capture location information for CST nodes */
    CAPTURE(func: () => any): any;
    protected RULE<T>(name: string, impl: (...implArgs: any[]) => T, config?: IRuleConfig<T>): (idxInCallingRule?: number, ...args: any[]) => any;
    protected OVERRIDE_RULE<T>(name: string, impl: (...implArgs: any[]) => T, config?: IRuleConfig<T>): (idxInCallingRule?: number, ...args: any[]) => any;
}
